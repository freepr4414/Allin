package tables

import (
	"database/sql"
	"fmt"
	"log"
)

// CreateSeatTable 열람실 관리 테이블 및 인덱스를 생성합니다.
// 함수 이름을 대문자로 시작하여 외부에서 접근 가능하게 만듭니다.
// 좌석 정보 테이블
func CreateSeatTable(db *sql.DB) error {
	log.Println("seat_table 테이블을 생성합니다...")

	// 테이블 생성
	createBaseTableQuery := `CREATE TABLE IF NOT EXISTS seat_table ();`

	_, err := db.Exec(createBaseTableQuery)
	if err != nil {
		return err
	}
	log.Println("seat_table 테이블 기본 구조 생성 완료")

	tableName := "seat_table"
	alterPrefix := fmt.Sprintf("ALTER TABLE %s ADD COLUMN IF NOT EXISTS ", tableName)

	// 각 필드 개별 추가
	fieldDefinitions := []string{
		// 기본키
		"serial_number BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY",
		// 열람실 코드
		"room_code INTEGER NOT NULL",
		// 좌석 번호
		"seat_number INTEGER NOT NULL",
		// 전원 번호
		"power_number INTEGER",
		// 번호판 전원 번호
		"number_power_number INTEGER",
		// 비밀번호
		"password TEXT",
		// 회원 아이디
		"member_id TEXT",
		// 회원 이름
		"member_name TEXT",
		// 메모
		"memo TEXT",
		// 체크인 시간
		"check_in_time TIME",
		// 체크인 버튼
		"check_in_button BOOLEAN",
		// 청소 라이트
		"cleaning_light BOOLEAN",
		// 체크인 타입
		"check_in_type INTEGER",
		// 체크인 시간
		"outing_datetime TIMESTAMP",
		// 좌석 해제 시간
		"seat_release_datetime TIMESTAMP",
		// 등록일
		"registration_date DATE",
		// 등록 시간
		"registration_time TIME",
		// 연장 시간
		"extension_datetime TIMESTAMP",
		// 만료일
		"expiration_date DATE",
		// 만료 시간
		"expiration_time TIME",
		// 위치 상단
		"m_top INTEGER",
		// 위치 왼쪽
		"m_left INTEGER",
		// 위치 너비
		"m_width INTEGER",
		// 위치 높이
		"m_height INTEGER",
		// 카드 번호
		"card_number TEXT",
		// 원격 제어 사용
		"remote_control_used BOOLEAN",
		// 일일 원격 제어 사용
		"daily_remote_control_used INTEGER",
		// 등급 번호
		"grade_number INTEGER",
		// 등급 이름
		"grade_name TEXT",
		// 다른이름
		"another_name TEXT",
		// 성별
		"gender SMALLINT",
		// 무인 등급
		"unmanned_grade INTEGER",
		// 무인 비활성화
		"unmanned_disabled BOOLEAN",
		// 관리자
		"is_admin BOOLEAN",
		// 위치 상단
		"f_top INTEGER",
		// 위치 왼쪽
		"f_left INTEGER",
		// 위치 너비
		"f_width INTEGER",
		// 위치 높이
		"f_height INTEGER",
		// 무료 좌석
		"free_seat BOOLEAN",
		// 무료 고정 좌석
		"free_fixed_seat BOOLEAN",
		// 무료 대기 좌석
		"free_waiting_seat BOOLEAN",
		// 해제 대기 좌석
		"release_waiting_seat BOOLEAN",
		// 무료 좌석 열람실
		"free_seat_room BOOLEAN",
		// 정기 고정 좌석
		"regular_fixed_seat BOOLEAN",
		// 사물함 사용
		"locker_used BOOLEAN",
		// 청소 제외
		"exclude_cleaning BOOLEAN",
		// 위치 상단
		"r_top INTEGER",
		// 위치 왼쪽
		"r_left INTEGER",
		// 등록 타입
		"registration_type TEXT",
		// 구매 금액
		"purchased_amount INTEGER",
		// 추가 금액
		"additional_amount INTEGER",
		// 이동 등급
		"move_grade INTEGER",
		// 이동 등급2
		"move_grade2 INTEGER",
	}

	// 각 필드 추가 쿼리 생성
	fieldQueries := make([]string, len(fieldDefinitions))
	for i, field := range fieldDefinitions {
		fieldQueries[i] = alterPrefix + field + ";"
	}

	// 각 필드 추가 실행 및 진행 상황 로깅
	for i, query := range fieldQueries {
		_, err = db.Exec(query)
		if err != nil {
			return err
		}
		// if (i+1)%10 == 0 || i == len(fieldQueries)-1 {
		log.Printf("seat_table 필드 추가 진행 중: %d/%d 완료", i+1, len(fieldQueries))
		// }
	}

	// 인덱스 생성 쿼리 목록 (이미 존재하면 생성하지 않음)
	indexQueries := []string{
		`CREATE INDEX IF NOT EXISTS idx_room_seat ON seat_table (room_code, seat_number);`,
		`CREATE INDEX IF NOT EXISTS idx_member_id ON seat_table (member_id);`,
		`CREATE INDEX IF NOT EXISTS idx_registration_date ON seat_table (registration_date);`,
		`CREATE INDEX IF NOT EXISTS idx_card_number ON seat_table (card_number);`,
		`CREATE INDEX IF NOT EXISTS idx_grade_number ON seat_table (grade_number);`,
		`CREATE INDEX IF NOT EXISTS idx_registration_type ON seat_table (registration_type);`,
		`CREATE INDEX IF NOT EXISTS idx_move_grade ON seat_table (move_grade);`,
		`CREATE INDEX IF NOT EXISTS idx_check_in_type ON seat_table (check_in_type);`,
		`CREATE INDEX IF NOT EXISTS idx_outing_datetime ON seat_table (outing_datetime);`,
		`CREATE INDEX IF NOT EXISTS idx_seat_release_datetime ON seat_table (seat_release_datetime);`,
	}

	// 인덱스 생성 실행
	for i, query := range indexQueries {
		_, err = db.Exec(query)
		if err != nil {
			return err
		}
		log.Printf("seat_table 인덱스 추가 중: %d/%d 완료", i+1, len(indexQueries))
	}

	log.Println("seat_table 테이블과 인덱스가 성공적으로 생성되었습니다.")
	return nil
}
