package tables

import (
	"database/sql"
	"fmt"
	"log"
)

// CreateCompanyImageTable 좌석 관리 테이블 및 인덱스를 생성합니다.
// 함수 이름을 대문자로 시작하여 외부에서 접근 가능하게 만듭니다.
func CreateCompanyImageTable(db *sql.DB) error {
	log.Println("company_image_table 테이블을 생성합니다...")

	// 테이블 생성
	createBaseTableQuery := `CREATE TABLE IF NOT EXISTS company_image_table();`

	_, err := db.Exec(createBaseTableQuery)
	if err != nil {
		return err
	}
	log.Println("company_image_table 테이블 기본 구조 생성 완료")

	tableName := "company_image_table"
	alterPrefix := fmt.Sprintf("ALTER TABLE %s ADD COLUMN IF NOT EXISTS ", tableName)

	// 각 필드 개별 추가
	fieldDefinitions := []string{
		// 기본키
		"serial_number BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY",
		//회사 아이디
		"company_id TEXT NOT NULL REFERENCES company_table(company_id) ON DELETE CASCADE",
		// 이미지 구분(로고=1, 대표이미지=2, 상세이미지=3)
		"image_type SMALLINT",
		// 이미지 표시 순서
		"image_order SMALLINT",
		// 이미지 URL
		"image_url TEXT",
		// 타이틀
		"title TEXT",
		// 설명
		"description TEXT",
		// 생성일
		"created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
		// 수정일
		"updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
	}

	// 각 필드 추가 쿼리 생성
	fieldQueries := make([]string, len(fieldDefinitions))
	for i, field := range fieldDefinitions {
		fieldQueries[i] = alterPrefix + field + ";"
	}

	// 각 필드 추가 실행 및 진행 상황 로깅
	for i, query := range fieldQueries {
		_, err = db.Exec(query)
		if err != nil {
			return err
		}
		// if (i+1)%5 == 0 || i == len(fieldQueries)-1 {
		log.Printf("company_image_table 필드 추가 진행 중: %d/%d 완료", i+1, len(fieldQueries))
		// }
	}

	// 인덱스 생성 쿼리 목록
	indexQueries := []string{
		`CREATE INDEX IF NOT EXISTS idx_company_id ON company_image_table (company_id);`,
		`CREATE INDEX IF NOT EXISTS idx_business_number ON company_image_table (business_number);`,
		`CREATE INDEX IF NOT EXISTS idx_ceo_name ON company_image_table (ceo_name);`,
	}

	// 인덱스 생성 실행
	for _, query := range indexQueries {
		_, err = db.Exec(query)
		if err != nil {
			return err
		}
	}

	log.Println("company_image_table 테이블과 인덱스가 성공적으로 생성되었습니다.")
	return nil
}
